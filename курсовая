import java.util.*;

public class Dijkstra {
    public void dijkstra(int[][] graph, int source) {
        int N = graph.length;
        int[] dist = new int[N];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(N, new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
                return dist[a] - dist[b];
            }
        });
        pq.offer(source);
        while (!pq.isEmpty()) {
            int curr = pq.poll();
            int[] neighbors = graph[curr];
            for (int i = 0; i < N; i++) {
                if (neighbors[i] > 0) {
                    int altDist = dist[curr] + neighbors[i];
                    if (altDist < dist[i]) {
                        dist[i] = altDist;
                        pq.offer(i);
                    }
                }
            }
        }
        System.out.println(Arrays.toString(dist));
    }
    
    public static void main(String[] args) {
        int[][] graph = {{0, 5, 0, 9, 2, 0},
                         {5, 0, 2, 0, 0, 0},
                         {0, 2, 0, 3, 0, 0},
                         {9, 0, 3, 0, 0, 2},
                         {2, 0, 0, 0, 0, 3},
                         {0, 0, 0, 2, 3, 0}};
        Dijkstra dijkstra = new Dijkstra();
        dijkstra.dijkstra(graph, 0);
    }
}
